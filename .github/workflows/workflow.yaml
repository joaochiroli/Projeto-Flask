name: Create Azure K8S

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  RUN_TERRAFORM_DESTROY: false


on:
  workflow_dispatch:
    inputs:
      destroyInfra:
        description: 'Destroy Infrastructure?'
        required: false
        default: 'false'

jobs:
  Terraform_Plan:
    name: TerraformPlanValidate
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: latest

    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true

    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        terraform -chdir=terraform/ init

    - name: Terraform Validate
      run: terraform -chdir=terraform/ validate -no-color

    - name: Terraform Plan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform -chdir=terraform/ plan -no-color -input=false
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

  Deploy_Terraform:
    name: 'Terraform Apply'
    needs: [Terraform_Plan]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: latest

    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        terraform -chdir=terraform/ init

    - name: Terraform Apply
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        terraform -chdir=terraform/ apply -auto-approve -input=false

  Destroy_Terraform:
    name: 'Conditional Terraform Destroy'
    needs: [Deploy_Terraform]
    runs-on: ubuntu-latest
    if: github.event.inputs.destroyInfra == 'true'
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: latest

    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        terraform -chdir=terraform/ init

    - name: Terraform Destroy
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        terraform -chdir=terraform/ destroy -auto-approve -input=false

  Attach_Acr_Aks:
    name: 'üöÄ Attach Acr no Aks'
    runs-on: ubuntu-latest
    needs: [Deploy_Terraform]

    steps:
    - name: 'üì• Checkout code'
      uses: actions/checkout@v3

    - name: 'üîê Azure Login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Assign AcrPull Role
      run: |
        ACR_ID=$(az acr show --name mdcrepositorychiroli --query "id" -o tsv)
        AKS_ID=$(az aks show --resource-group projeto-flask --name k8scluster --query "identityProfile.kubeletidentity.objectId" -o tsv)
        az role assignment create --assignee $AKS_ID --role AcrPull --scope $ACR_ID

  deploy_on_Aks:
    name: 'üöÄ Deploy App on AKS'
    runs-on: ubuntu-latest
    needs: [Deploy_Terraform]

    steps:
    - name: 'üì• Checkout code'
      uses: actions/checkout@v3

    - name: 'üîê Azure Login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üîë 'Docker Login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: 'üîë Get AKS Credentials'
      run: az aks get-credentials --resource-group projeto-flask --name k8scluster --overwrite-existing

    - name: 'üîê Create Kubernetes Secret for ACR'
      run: |
        kubectl create secret docker-registry acr-secret \
          --docker-server=${{ secrets.REGISTRY_LOGIN_SERVER }} \
          --docker-username=${{ secrets.REGISTRY_USERNAME }} \
          --docker-password=${{ secrets.REGISTRY_PASSWORD }} \
          --docker-email=example@example.com || echo "Secret already exists"

    - name: 'üìÇ Validate Kubernetes Manifests'
      run: kubectl kustomize kube-manifests/

    - name: 'üõ≥ Deploy to AKS'
      run: kubectl apply -f kube-manifests/

    - name: 'üìÑ Check Pods Status'
      run: kubectl get pods --all-namespaces